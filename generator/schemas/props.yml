config:
  softDeletes: false # softDeletes will auto create deleted_at and turn on softDeletes in the model
  autoIds: true # Will auto create ids
  autoTimestamps: true # Will auto create timestamps like 'created_at' and 'updated_at'
  autoRelations: true # Will auto create relations based on 'foreignId', or creating the opposite relation. Also auto creates missing pivot tables
  autoNullable: true # Will auto set all fields to nullable except for 'id', overridable on field level
  autoFillable: true # Will auto set all fields als fillable except for 'id', overridable on field level
  include:  # Set this to only use specific Generators
    # - MigrationGenerator
  exclude:  # Set this use all generators except the specified
    # - ModelGenerator



Store:
  relations:
    - is: hasOneThrough
      related: Tag #!
      through: Product #!
      firstKey: store_id # on Product
      secondKey: product_id # on Tag
      localKey: id # on Store
      secondLocalKey: id # on Product
      table1: products #
      table2: tags
      prop: tag
    - is: hasManyThrough
      related: Tag #!
      through: Product #!
      firstKey: store_id # on Product
      secondKey: product_id # on Tag
      localKey: id # on Store
      secondLocalKey: id # on Product
      table1: products #
      table2: tags
      prop: tags


Product:
  config:
    ...
    table: products
    deaultRelatedTitleField: name
    label:
      plural: Producten
      singular: Product
  code: # Add custom code to some files. Example:
    model:
      imports: |
        use Laravel\Nova\Fields\Currency;
        use Laravel\Nova\Fields\Markdown;
      header:
      body: |
        public function someFunction() {
            return "Test 123";
        }
  fields:
    name:
      type: string:200 # Mandatory  - Results in migration: $table->string('name', 200);
      title: Name
      rules: required|bla|bla
      casts: string
      fillable: true
      appends: false
      hidden: false
      nullable: true
    category_id:
      type: foreignId # Mandatory  - Results in migration: $table->foreignId('category_id')->references('id')->on('categories');
      references: id
      on: categories
    store_id:
      type: foreignId # Mandatory  - Results in migration: $table->foreignId('category_id')->references('id')->on('categories');
      references: id
      on: stores
  relations:
    - is: hasOne
      related: Tag #!
      foreignKey: product_id
      localKey: id
      table: tags #
      prop: tag
    - is: hasMany
      related: Tag #!
      foreignKey: product_id
      localKey: id
      table: tags #
      prop: tags
    - is: morphOne
      related: Image  #!
      name: imagable  #!
      type: imagable_type
      id: imagable_id
      localKey: id
      prop: image #
    - is: morphMany
      related: Image  #!
      name: imagable #!
      type: imagable_type
      id: imagable_id
      localKey: id
      prop: images #

    - is: belongsToMany # Mandatory
      related: File # Mandatory  #!
      table: file_product
      foreignPivotKey: product_id
      relatedPivotKey: file_id
      parentKey: id # on Product
      relatedKey: id # on File
      relation: files # geabasseerd op prop
      prop: files #

Tag:
  fields:
    product_id:
      type: foreignId # Mandatory  - Results in migration: $table->foreignId('category_id')->references('id')->on('categories');
      references: id
      on: products
  relations:
    - is: belongsTo
      related: Product #!
      foreignKey: product_id
      ownerKey: id
      relation: product
      table: products #
      prop: product
    - is: morphedByMany
      related: Post #!
      name: taggable #!
      table: taggables
      foreignPivotKey: tag_id
      relatedPivotKey: taggable_id
      parentKey: id
      relatedKey: id
      prop: posts #

Post:
  relations:
    - is: morphToMany
      related: Tag #!
      name: taggable #!
      table: taggables
      foreignPivotKey: taggable_id
      relatedPivotKey: tag_id
      parentKey: id
      relatedKey: id
      inverse: false # ?
      prop: tags #


Image:
    relations:
      - is: morphTo
        name: imagable (__FUNCTION__)
        type: imagable_type
        id: imagable_id
        ownerKey: id
        prop: imagable #

File:
  relations:
    - is: belongsToMany # Mandatory
      related: Product # Mandatory
      table: file_product
      foreignPivotKey: file_id
      relatedPivotKey: product_id
      parentKey: id # on File
      relatedKey: id # on Product
      relation: products # geabasseerd op prop
      prop: products #

FileProduct:
